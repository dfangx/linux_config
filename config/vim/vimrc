""""""""""""""""""""""""""""""""""""""""""""""""""
" VIMRC FILE
""""""""""""""""""""""""""""""""""""""""""""""""""
"
""""""""""""""""""""""""""""""""""""""""""""""""""
" XDG_CONFIG
""""""""""""""""""""""""""""""""""""""""""""""""""
set undodir=$XDG_CACHE_HOME/vim/undo
set directory=$XDG_CACHE_HOME/vim/swap
set backupdir=$XDG_CACHE_HOME/vim/backup
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after

let $MYVIMRC='$XDG_CONFIG_HOME/vim/vimrc'
""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""
set path+=**                                " Set path for vim
set cursorline                              " Highlights line cursor is on
set lazyredraw                              " Redraw screen only when necessary
set showcmd                                 " Show command in bottom bar
set wildmenu                                " Turn on wildmenu
set showmatch                               " Highlight matching parenthesis
set backspace=indent,eol,start              " Backspace over everything in insert mode
set ruler                                   " Show cursor position all the time
set ttimeout                                " Time out for key codes
set ttimeoutlen=100                         " Wait up to 100ms after Esc for special key
set display=truncate                        " Show @@@ in last line if truncated
set scrolloff=5                             " Show a few lines of context around cursor
set showmode                                " Show mode in status bar
set autoindent                              " Autoindent
set pastetoggle=<F1>                        " Turn on paste mode when in insert mode
set hidden                                  " Hide files in background instead of closing them
set history=1000                            " Set undo limit to 1000
set backup                                  " keep a backup file (restore to previous version)
set undofile                                " keep an undo file (undo changes after closing)
set incsearch                               " Do incremental searching when it's possible to timeout.
set hlsearch                                " Switch on highlighting the last used search pattern.
set foldenable                              " Enable code folding
set foldmethod=manual                       " Fold on indent
set foldlevelstart=0                        " Set starting fold level to 0
set number                                  " Display line numbers
set relativenumber                          " Display relative line numbers
set softtabstop=4
set shiftwidth=4
set expandtab                               " Convert tabs to spaces
set background=dark                         " Set background to dark
set splitbelow                              " New window splits on the bottom
set splitright                              " New window splits on the right side
set omnifunc=syntaxcomplete#Complete        " Enable omnicomplete
set completeopt+=menuone

filetype plugin on
filetype indent on                          " Indentation per filetype

syntax enable                               " Enable syntax highlighting
colorscheme cobalt                          " Use colorscheme cobalt

highlight StatusLine ctermbg=66 ctermfg=234 
highlight StatusLineNC ctermbg=66 ctermfg=234 

""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEYBINDINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <Space> <NOP>
let mapleader=" "   " Set leader key

" Snippets
"nnoremap <leader>html :-1r $XDG_CONFIG_HOME/vim/skeletons/skeleton.html<cr>
"nnoremap <leader>c :-1r $XDG_CONFIG_HOME/vim/skeletons/skeleton.c<cr>
"nnoremap <leader>java :-1r $XDG_CONFIG_HOME/vim/skeletons/skeleton.java<cr>
"nnoremap <leader>py :-1r $XDG_CONFIG_HOME/vim/skeletons/skeleton.py<cr>
"nnoremap <leader>tex :-1r $XDG_CONFIG_HOME/vim/skeletons/skeleton.tex<cr>

" Buffers
nnoremap <leader>n :bn<cr>
nnoremap <leader>N :bp<cr>
nnoremap <leader>b :ls<cr>:b<space>
nnoremap <leader>x :bd<cr>

" Move pane
nnoremap <silent> <leader>h <C-w>H
nnoremap <silent> <leader>l <C-w>L
nnoremap <silent> <leader>k <C-w>K
nnoremap <silent> <leader>j <C-w>J

" Split window
nnoremap <leader>s <C-w>s
nnoremap <leader>v <C-w>v
 
" Resize window
nnoremap <silent> <leader>< 10<C-w><
nnoremap <silent> <leader>> 10<C-w>>
nnoremap <silent> <leader>+ 10<C-w>+
nnoremap <silent> <leader>- 10<C-w>-

" Edit vimrc
nnoremap <leader>ev :tabnew $MYVIMRC<cr>

" Open terminal
nnoremap <leader>t :term<cr>
nnoremap <leader>T :vert term<cr>

nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>

"inoremap " ""<left>
"inoremap ' ''<left>
"inoremap < <><left>
"inoremap [ []<left>

""inoremap (; ();<left><left>
""inoremap (;; ();
""inoremap (i ()<left>
""inoremap ( ()
""
""inoremap( ()
""inoremap {; <cr>{<cr>};<C-o>O
""inoremap {i {}<left>
""inoremap {f <cr>{<cr>}<C-o>O
""inoremap {F <cr>{<cr>}<C-o>O
""inoremap { {}

inoremap <C-v> <C-r>"
inoremap jk <esc>

nnoremap <C-s> :wa<cr>
inoremap <C-s> <C-O>:wa<cr><esc>

cabbr Q q
cabbr Q! q!

nnoremap <leader>f :find 
""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCOMMANDS
""""""""""""""""""""""""""""""""""""""""""""""""""""
" Put these in an autocmd group, so that you can revert them with:
" ":augroup vimStartup | au! | augroup END"
"
augroup vimStartup
    au!
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid, when inside an event handler
    " (happens when dropping a file on gvim) and for a commit message (it's
    " likely a different one than last time).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif
augroup END

augroup AutoMake
    autocmd!
    if filereadable("Makefile")
        autocmd BufWritePost *.h,*.c,*.cpp make
        autocmd QuickFixCmdPost * cwindow
    endif
augroup END

function Eatchar(pat)
    let c = nr2char(getchar(0))
    return (c =~ a:pat) ? '' : c
endfunction

function CAbbrev()
    iabclear
    inoreabbrev <buffer> inc #include <><esc>i<c-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> if if (){<cr>}<esc>?)<cr>i<c-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> eli else if (){<cr>}<esc>?)<cr>i<C-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> el else {<cr>}<esc>O<C-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> amain int main(int argc, char** argv)<cr>{<cr>return 0;<cr>}<esc>kO<c-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> main int main()<cr>{<cr>return 0;<cr>}<esc>kO<c-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> whlp while (){<cr>}<esc>k%i<C-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> fori for(int i = 0; i < s; i++){<cr>}<esc>?s<cr>viwc<c-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> ifunc int name()<cr>{<cr>}<esc>2k2fnviwc<c-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> vfunc void name()<cr>{<cr>}<esc>2kfnviwc<c-r>=Eatchar('\s')<cr>
endfunction

function CppAbbrev()
    iabclear
    inoreabbrev <buffer> class class name<cr>{<cr>};<esc>2kfnviwc<c-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> cout std::cout << ;<esc>i<c-r>=Eatchar('\s')<cr>
    inoreabbrev <buffer> endl << std::endl<c-r>=Eatchar('\s')<cr><esc>

    call CAbbrev()
endfunction

augroup FileTypeRules
    autocmd!
    autocmd FileType plaintex setlocal textwidth=80      " .tex file settings
    autocmd FileType markdown setlocal textwidth=80 " markdown settings
    autocmd BufWritePost $MYVIMRC :source $MYVIMRC
    "autocmd FileType cpp call CppAbbrev()
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""
if empty(glob('$XDG_CONFIG_HOME/vim/autoload/plug.vim'))
    silent !curl -fLo $XDG_CONFIG_HOME/vim/autoload/plug.vim --create-dirs 
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif"

call plug#begin()
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'tikhomirov/vim-glsl'
call plug#end()


